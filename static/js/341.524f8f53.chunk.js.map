{"version":3,"file":"static/js/341.524f8f53.chunk.js","mappings":"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","sources":["schemas/signupSchema.js","pages/SignUpPage/SignUp.jsx","pages/SignUpPage/SignUpPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\r\n\r\nexport const signupSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .matches(/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/, 'Invalid email')\r\n    .required('Email is required'),\r\n  password: Yup.string()\r\n    .matches(\r\n      /^(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,64}$/,\r\n      'Password should have letters, numbers, special characters'\r\n    )\r\n    .min(8, 'Too short password')\r\n    .max(64, 'Too long password')\r\n    .required('Password is required'),\r\n  repeatPassword: Yup.string()\r\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n    .min(8, 'Too short password')\r\n    .max(64, 'Too long password')\r\n    .required('Repeat password is required'),\r\n});\r\n","import Container from 'components/common/Container';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Formik, Field, ErrorMessage } from 'formik';\r\nimport { errorSelector, successfulSelector } from '../../store/auth/selectors';\r\nimport sprite from '../../img/sprites.svg';\r\nimport {\r\n  Label,\r\n  Title,\r\n  LinkToPage,\r\n  Box,\r\n  StyledForm,\r\n  StyledInput,\r\n  SigninButton,\r\n  ErrorM,\r\n  StyledPasswordInput,\r\n  ResendBtn,\r\n} from '../SigninPage/Auth.styled';\r\nimport { Wrapper } from '../HomePage/HomePage.styled';\r\nimport { signupSchema } from 'schemas/signupSchema';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { resetError, resetSuccessful } from 'store/auth/authSlice';\r\n\r\nconst initialValues = {\r\n  email: '',\r\n  password: '',\r\n  repeatPassword: '',\r\n};\r\n\r\nconst Signup = ({ signup, resend }) => {\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n  const [repeatPasswordVisible, setRepeatPasswordVisible] = useState(false);\r\n  const successful = useSelector(successfulSelector);\r\n  const navigate = useNavigate();\r\n  const error = useSelector(errorSelector);\r\n  const dispatch = useDispatch();\r\n\r\n  const storeEmailInLocalStorage = email => {\r\n    localStorage.setItem('registrationEmail', email);\r\n  };\r\n  const getStoredEmailFromLocalStorage = () => {\r\n    return localStorage.getItem('registrationEmail') || '';\r\n  };\r\n\r\n  const storedEmail = getStoredEmailFromLocalStorage();\r\n  const [email, setEmail] = useState(storedEmail);\r\n\r\n  const handleSuccessfulAuthentication = useCallback(() => {\r\n    toast.info('Success! Please, check your mail for confirmation.');\r\n    setTimeout(() => {\r\n      navigate('/signin');\r\n    }, 6000);\r\n    dispatch(resetSuccessful());\r\n  }, [dispatch, navigate]);\r\n\r\n  useEffect(() => {\r\n    console.log(successful);\r\n    successful && !error && handleSuccessfulAuthentication();\r\n    if (error) {\r\n      toast.error(error);\r\n      dispatch(resetError());\r\n    }\r\n  }, [dispatch, successful, error, handleSuccessfulAuthentication]);\r\n\r\n  const handleSubmit = async (values, { setSubmitting }) => {\r\n    storeEmailInLocalStorage(values.email);\r\n    setEmail(values.email);\r\n    await signup({ email: values.email, password: values.password });\r\n\r\n    setSubmitting(false);\r\n  };\r\n\r\n  const handleResendConfirmationEmail = async () => {\r\n    await resend({ email });\r\n    toast.info('Confirmation email has been resent. Please check your email.');\r\n  };\r\n\r\n  const togglePasswordVisibility = field => {\r\n    if (field === 'password') {\r\n      setPasswordVisible(!passwordVisible);\r\n    } else if (field === 'repeatPassword') {\r\n      setRepeatPasswordVisible(!repeatPasswordVisible);\r\n    }\r\n  };\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Box>\r\n          <div>\r\n            <Formik\r\n              initialValues={{ email, ...initialValues }}\r\n              validationSchema={signupSchema}\r\n              onSubmit={handleSubmit}\r\n            >\r\n              {({ isSubmitting, errors, touched }) => (\r\n                <StyledForm>\r\n                  <Title>Sign Up</Title>\r\n                  <div>\r\n                    <Label>Enter your email</Label>\r\n                    <Field\r\n                      as={StyledInput}\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      placeholder=\"Email\"\r\n                      hasError={touched.email && errors.email}\r\n                      required\r\n                    />\r\n                    <ErrorMessage name=\"email\" component={ErrorM} />\r\n                  </div>\r\n                  <div>\r\n                    <Label>Enter your password</Label>\r\n                    <StyledPasswordInput>\r\n                      <Field\r\n                        as={StyledInput}\r\n                        type={passwordVisible ? 'text' : 'password'}\r\n                        name=\"password\"\r\n                        placeholder=\"Password\"\r\n                        hasError={touched.password && errors.password}\r\n                        required\r\n                      />\r\n                      <span\r\n                        onClick={() => togglePasswordVisibility('password')}\r\n                      >\r\n                        {passwordVisible ? (\r\n                          <svg className=\"eye\">\r\n                            <use href={sprite + '#eye'} />\r\n                          </svg>\r\n                        ) : (\r\n                          <svg className=\"eye\">\r\n                            <use href={sprite + '#hidden'} />\r\n                          </svg>\r\n                        )}\r\n                      </span>\r\n                    </StyledPasswordInput>\r\n                    <ErrorMessage name=\"password\" component={ErrorM} />\r\n                  </div>\r\n                  <div>\r\n                    <Label>Repeat password</Label>\r\n                    <StyledPasswordInput>\r\n                      <Field\r\n                        as={StyledInput}\r\n                        type={repeatPasswordVisible ? 'text' : 'password'}\r\n                        name=\"repeatPassword\"\r\n                        placeholder=\"Repeat password\"\r\n                        required\r\n                        hasError={\r\n                          touched.repeatPassword && errors.repeatPassword\r\n                        }\r\n                      />\r\n                      <span\r\n                        onClick={() =>\r\n                          togglePasswordVisibility('repeatPassword')\r\n                        }\r\n                      >\r\n                        {repeatPasswordVisible ? (\r\n                          <svg className=\"eye\">\r\n                            <use href={sprite + '#eye'} />\r\n                          </svg>\r\n                        ) : (\r\n                          <svg className=\"eye\">\r\n                            <use href={sprite + '#hidden'} />\r\n                          </svg>\r\n                        )}\r\n                      </span>\r\n                    </StyledPasswordInput>\r\n                    <ErrorMessage name=\"repeatPassword\" component={ErrorM} />\r\n                  </div>\r\n                  <SigninButton\r\n                    type=\"submit\"\r\n                    width={336}\r\n                    disabled={isSubmitting}\r\n                  >\r\n                    Sign Up\r\n                  </SigninButton>\r\n                </StyledForm>\r\n              )}\r\n            </Formik>\r\n\r\n            <LinkToPage to=\"/signin\">Sign in</LinkToPage>\r\n            <ResendBtn onClick={handleResendConfirmationEmail}>\r\n              Resend Confirmation Email\r\n            </ResendBtn>\r\n            <ToastContainer />\r\n          </div>\r\n        </Box>\r\n      </Container>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { resendEmail, signUpUser } from '../../store/auth/thunk';\r\n\r\nimport SignUp from './SignUp';\r\n\r\nconst SignupPage = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const signup = body => {\r\n    dispatch(signUpUser(body));\r\n  };\r\n\r\n  const resend = body => {\r\n    dispatch(resendEmail(body));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SignUp signup={signup} resend={resend} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupPage;\r\n"],"names":["signupSchema","Yup","shape","email","matches","required","password","min","max","repeatPassword","oneOf","initialValues","_ref","signup","resend","_useState","useState","_useState2","_slicedToArray","passwordVisible","setPasswordVisible","_useState3","_useState4","repeatPasswordVisible","setRepeatPasswordVisible","successful","useSelector","successfulSelector","navigate","useNavigate","error","errorSelector","dispatch","useDispatch","storeEmailInLocalStorage","localStorage","setItem","storedEmail","getItem","_useState5","_useState6","setEmail","handleSuccessfulAuthentication","useCallback","toast","setTimeout","resetSuccessful","useEffect","console","log","resetError","handleSubmit","_ref3","_asyncToGenerator","_regeneratorRuntime","_callee","values","_ref2","setSubmitting","_context","prev","next","stop","_x","_x2","apply","arguments","handleResendConfirmationEmail","_ref4","_callee2","_context2","togglePasswordVisibility","field","_jsx","Wrapper","children","Container","Box","_jsxs","Formik","_objectSpread","validationSchema","onSubmit","_ref5","isSubmitting","errors","touched","StyledForm","Title","Label","Field","as","StyledInput","type","name","placeholder","hasError","ErrorMessage","component","ErrorM","StyledPasswordInput","onClick","className","href","sprite","SigninButton","width","disabled","LinkToPage","to","ResendBtn","ToastContainer","_Fragment","SignUp","body","signUpUser","resendEmail"],"sourceRoot":""}