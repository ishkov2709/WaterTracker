{"version":3,"file":"static/js/341.efbb0448.chunk.js","mappings":"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","sources":["schemas/signupSchema.js","pages/SignUpPage/SignUp.jsx","pages/SignUpPage/SignUpPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\r\n\r\nexport const signupSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .matches(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/, 'Invalid email')\r\n    .required('Email is required'),\r\n  password: Yup.string()\r\n    .matches(\r\n      /^(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,64}$/,\r\n      'Email should have letters, numbers, special characters'\r\n    )\r\n    .min(8, 'Too short password')\r\n    .max(64, 'Too long password')\r\n    .required('Password is required'),\r\n  repeatPassword: Yup.string()\r\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n    .min(8, 'Too short password')\r\n    .max(64, 'Too long password')\r\n    .required('Repeat password is required'),\r\n});\r\n","import Container from 'components/common/Container';\r\nimport React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Formik, Field, ErrorMessage } from 'formik';\r\n\r\nimport { errorSelector, userSelector } from '../../store/auth/selectors';\r\nimport sprite from '../../img/sprites.svg';\r\n\r\nimport {\r\n  Label,\r\n  Title,\r\n  LinkToPage,\r\n  Box,\r\n  StyledForm,\r\n  StyledInput,\r\n  SigninButton,\r\n  ErrorM,\r\n  StyledPasswordInput,\r\n  CaughtError,\r\n} from '../SigninPage/Auth.styled';\r\nimport { Wrapper } from '../HomePage/HomePage.styled';\r\nimport { signupSchema } from 'schemas/signupSchema';\r\nimport Button from 'components/common/Button';\r\n\r\nconst initialValues = {\r\n  email: '',\r\n  password: '',\r\n  repeatPassword: '',\r\n};\r\n\r\nconst Signup = ({ signup }) => {\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n  const [repeatPasswordVisible, setRepeatPasswordVisible] = useState(false);\r\n  const isAuth = useSelector(userSelector);\r\n  const navigate = useNavigate();\r\n  const error = useSelector(errorSelector);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = (values, { setSubmitting }) => {\r\n    dispatch(\r\n      signup({ email: values.email, password: values.password }),\r\n      isAuth && navigate('/signin')\r\n    );\r\n    setSubmitting(false);\r\n  };\r\n\r\n  const togglePasswordVisibility = field => {\r\n    if (field === 'password') {\r\n      setPasswordVisible(!passwordVisible);\r\n    } else if (field === 'repeatPassword') {\r\n      setRepeatPasswordVisible(!repeatPasswordVisible);\r\n    }\r\n  };\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Box>\r\n          <div>\r\n            {error && <CaughtError>{error}</CaughtError>}\r\n            <Formik\r\n              initialValues={initialValues}\r\n              validationSchema={signupSchema}\r\n              onSubmit={handleSubmit}\r\n            >\r\n              {({ isSubmitting, errors, touched }) => (\r\n                <StyledForm>\r\n                  <Title>Sign Up</Title>\r\n                  <div>\r\n                    <Label>Enter your email</Label>\r\n                    <Field\r\n                      as={StyledInput}\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      placeholder=\"Email\"\r\n                      hasError={touched.email && errors.email}\r\n                      required\r\n                    />\r\n                    <ErrorMessage name=\"email\" component={ErrorM} />\r\n                  </div>\r\n                  <div>\r\n                    <Label>Enter your password</Label>\r\n                    <StyledPasswordInput>\r\n                      <Field\r\n                        as={StyledInput}\r\n                        type={passwordVisible ? 'text' : 'password'}\r\n                        name=\"password\"\r\n                        placeholder=\"Password\"\r\n                        hasError={touched.password && errors.password}\r\n                        required\r\n                      />\r\n                      <span\r\n                        onClick={() => togglePasswordVisibility('password')}\r\n                      >\r\n                        {passwordVisible ? (\r\n                          <svg className=\"eye\">\r\n                            <use href={sprite + '#eye'} />\r\n                          </svg>\r\n                        ) : (\r\n                          <svg className=\"eye\">\r\n                            <use href={sprite + '#hidden'} />\r\n                          </svg>\r\n                        )}\r\n                      </span>\r\n                    </StyledPasswordInput>\r\n                    <ErrorMessage name=\"password\" component={ErrorM} />\r\n                  </div>\r\n                  <div>\r\n                    <Label>Repeat password</Label>\r\n                    <StyledPasswordInput>\r\n                      <Field\r\n                        as={StyledInput}\r\n                        type={repeatPasswordVisible ? 'text' : 'password'}\r\n                        name=\"repeatPassword\"\r\n                        placeholder=\"Repeat password\"\r\n                        required\r\n                        hasError={\r\n                          touched.repeatPassword && errors.repeatPassword\r\n                        }\r\n                      />\r\n                      <span\r\n                        onClick={() =>\r\n                          togglePasswordVisibility('repeatPassword')\r\n                        }\r\n                      >\r\n                        {repeatPasswordVisible ? (\r\n                          <svg className=\"eye\">\r\n                            <use href={sprite + '#eye'} />\r\n                          </svg>\r\n                        ) : (\r\n                          <svg className=\"eye\">\r\n                            <use href={sprite + '#hidden'} />\r\n                          </svg>\r\n                        )}\r\n                      </span>\r\n                    </StyledPasswordInput>\r\n                    <ErrorMessage name=\"repeatPassword\" component={ErrorM} />\r\n                  </div>\r\n                  <SigninButton\r\n                    type=\"submit\"\r\n                    width={336}\r\n                    disabled={isSubmitting}\r\n                  >\r\n                    Sign Up\r\n                  </SigninButton>\r\n                </StyledForm>\r\n              )}\r\n            </Formik>\r\n            <LinkToPage to=\"/signin\">Sign in</LinkToPage>\r\n          </div>\r\n        </Box>\r\n      </Container>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { signUpUser } from '../../store/auth/thunk';\r\n\r\nimport SignUp from './SignUp';\r\n\r\nconst SignupPage = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const signup = body => {\r\n    dispatch(signUpUser(body));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SignUp signup={signup} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupPage;\r\n"],"names":["signupSchema","Yup","shape","email","matches","required","password","min","max","repeatPassword","oneOf","initialValues","_ref","signup","_useState","useState","_useState2","_slicedToArray","passwordVisible","setPasswordVisible","_useState3","_useState4","repeatPasswordVisible","setRepeatPasswordVisible","isAuth","useSelector","userSelector","navigate","useNavigate","error","errorSelector","dispatch","useDispatch","togglePasswordVisibility","field","_jsx","Wrapper","children","Container","Box","_jsxs","CaughtError","Formik","validationSchema","onSubmit","values","_ref2","setSubmitting","_ref3","isSubmitting","errors","touched","StyledForm","Title","Label","Field","as","StyledInput","type","name","placeholder","hasError","ErrorMessage","component","ErrorM","StyledPasswordInput","onClick","className","href","sprite","SigninButton","width","disabled","LinkToPage","to","_Fragment","SignUp","body","signUpUser"],"sourceRoot":""}