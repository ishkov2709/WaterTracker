{"version":3,"file":"static/js/604.6216cb4e.chunk.js","mappings":"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","sources":["schemas/singinSchema.js","pages/SigninPage/SignIn.jsx","pages/SigninPage/SigninPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\r\n\r\nexport const singinSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .matches(/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/, 'Invalid email')\r\n    .required('Email is required'),\r\n  password: Yup.string()\r\n    .matches(\r\n      /^(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,64}$/,\r\n      'Password should have letters, numbers, special characters'\r\n    )\r\n    .min(8, 'Too short password')\r\n    .max(64, 'Too long password')\r\n    .required('Password is required'),\r\n});\r\n","import Container from 'components/common/Container';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport sprite from '../../img/sprites.svg';\r\nimport {\r\n  Box,\r\n  Label,\r\n  StyledForm,\r\n  StyledInput,\r\n  SigninButton,\r\n  Title,\r\n  LinkToPage,\r\n  ErrorM,\r\n  StyledPasswordInput,\r\n  AllForm,\r\n} from './Auth.styled';\r\nimport { Wrapper } from '../HomePage/HomePage.styled';\r\nimport { Formik, Field, ErrorMessage } from 'formik';\r\nimport { singinSchema } from 'schemas/singinSchema';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { resetError } from 'store/auth/authSlice';\r\nimport { useAuth } from 'hooks/useAuth';\r\n\r\nconst initialValues = {\r\n  email: '',\r\n  password: '',\r\n};\r\n\r\nconst Signin = ({ signin }) => {\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n  const { error } = useAuth();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      toast.error(error);\r\n      dispatch(resetError());\r\n    }\r\n  }, [error, dispatch]);\r\n\r\n  const handleSubmit = async (values, { setSubmitting }) => {\r\n    signin(values);\r\n    setSubmitting(false);\r\n    localStorage.setItem('registrationEmail', '');\r\n  };\r\n\r\n  const togglePasswordVisibility = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Box>\r\n          <AllForm>\r\n            <Formik\r\n              initialValues={initialValues}\r\n              validationSchema={singinSchema}\r\n              onSubmit={handleSubmit}\r\n            >\r\n              {({ isSubmitting, errors, touched }) => (\r\n                <StyledForm>\r\n                  <Title>Sign In</Title>\r\n                  <div>\r\n                    <Label>Enter your email</Label>\r\n                    <Field\r\n                      as={StyledInput}\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      placeholder=\"Email\"\r\n                      hasError={touched.email && errors.email}\r\n                      required\r\n                    />\r\n                    <ErrorMessage name=\"email\" component={ErrorM} />\r\n                  </div>\r\n                  <div>\r\n                    <Label>Enter your password</Label>\r\n                    <StyledPasswordInput>\r\n                      <Field\r\n                        as={StyledInput}\r\n                        type={passwordVisible ? 'text' : 'password'}\r\n                        name=\"password\"\r\n                        placeholder=\"Password\"\r\n                        hasError={touched.password && errors.password}\r\n                        required\r\n                      />\r\n                      <span onClick={togglePasswordVisibility}>\r\n                        {passwordVisible ? (\r\n                          <svg className=\"eye\">\r\n                            <use href={sprite + '#eye'} />\r\n                          </svg>\r\n                        ) : (\r\n                          <svg className=\"eye\">\r\n                            <use href={sprite + '#hidden'} />\r\n                          </svg>\r\n                        )}\r\n                      </span>\r\n                    </StyledPasswordInput>\r\n                    <ErrorMessage name=\"password\" component={ErrorM} />\r\n                  </div>\r\n                  <SigninButton\r\n                    type=\"submit\"\r\n                    width={336}\r\n                    disabled={isSubmitting}\r\n                  >\r\n                    Sign In\r\n                  </SigninButton>\r\n                </StyledForm>\r\n              )}\r\n            </Formik>\r\n\r\n            <LinkToPage to=\"/forgot-password\">Forgot password?</LinkToPage>\r\n\r\n            <LinkToPage to=\"/signup\">Sign up</LinkToPage>\r\n            <ToastContainer />\r\n          </AllForm>\r\n        </Box>\r\n      </Container>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Signin;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport Signin from './SignIn';\r\nimport { signInUser } from '../../store/auth/thunk';\r\n\r\nconst SigninPage = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const signin = body => {\r\n    dispatch(signInUser(body));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Signin signin={signin} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SigninPage;\r\n"],"names":["singinSchema","Yup","shape","email","matches","required","password","min","max","initialValues","_ref","signin","_useState","useState","_useState2","_slicedToArray","passwordVisible","setPasswordVisible","error","useAuth","dispatch","useDispatch","useEffect","toast","resetError","handleSubmit","_ref3","_asyncToGenerator","_regeneratorRuntime","_callee","values","_ref2","setSubmitting","_context","prev","next","localStorage","setItem","stop","_x","_x2","apply","arguments","togglePasswordVisibility","_jsx","Wrapper","children","Container","Box","_jsxs","AllForm","Formik","validationSchema","onSubmit","_ref4","isSubmitting","errors","touched","StyledForm","Title","Label","Field","as","StyledInput","type","name","placeholder","hasError","ErrorMessage","component","ErrorM","StyledPasswordInput","onClick","className","href","sprite","SigninButton","width","disabled","LinkToPage","to","ToastContainer","_Fragment","Signin","body","signInUser"],"sourceRoot":""}