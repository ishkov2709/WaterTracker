{"version":3,"file":"static/js/83.00c649d3.chunk.js","mappings":"2QA+BMA,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KAAaE,MAAM,iBAAiBC,SAAS,qBACpDC,SAAUJ,EAAAA,KAAaG,SAAS,wBAChCE,eAAgBL,EAAAA,KACbM,MAAM,CAACN,EAAAA,GAAQ,YAAa,MAAO,wBACnCG,SAAS,iCAGRI,EAAgB,CACpBL,MAAO,GACPE,SAAU,GACVC,eAAgB,IA0GlB,EAvGe,SAAHG,GAAoB,IAAdC,EAAMD,EAANC,OACVC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IACpBC,GAAWC,EAAAA,EAAAA,MAMjB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAO,CAAAC,UACNF,EAAAA,EAAAA,KAACG,EAAAA,EAAS,CAAAD,UACRF,EAAAA,EAAAA,KAACI,EAAAA,GAAG,CAAAF,UACFG,EAAAA,EAAAA,MAAA,OAAAH,SAAA,CACGP,IAASK,EAAAA,EAAAA,KAAA,MAAAE,SAAKP,KACfK,EAAAA,EAAAA,KAACM,EAAAA,GAAK,CAAAJ,SAAC,aAuCPF,EAAAA,EAAAA,KAACO,EAAAA,GAAM,CACLf,cAAeA,EACfR,iBAAkBA,EAClBwB,SApDS,SAACC,EAAMC,GAAyB,IAArBC,EAAaD,EAAbC,cAC9Bb,EAASJ,EAAO,CAAEP,MAAOsB,EAAOtB,MAAOE,SAAUoB,EAAOpB,YACxDsB,GAAc,EAChB,EAiDmCT,UAEvBG,EAAAA,EAAAA,MAACO,EAAAA,GAAU,CAAAV,SAAA,EACTG,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACEF,EAAAA,EAAAA,KAACa,EAAAA,GAAK,CAAAX,SAAC,sBACPF,EAAAA,EAAAA,KAACc,EAAAA,GAAK,CACJC,GAAIC,EAAAA,GACJC,KAAK,QACLC,KAAK,QACLC,YAAY,QACZ/B,UAAQ,KAEVY,EAAAA,EAAAA,KAACoB,EAAAA,GAAY,CAACF,KAAK,QAAQG,UAAWC,EAAAA,SAExCjB,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACEF,EAAAA,EAAAA,KAACa,EAAAA,GAAK,CAAAX,SAAC,yBACPF,EAAAA,EAAAA,KAACc,EAAAA,GAAK,CACJC,GAAIC,EAAAA,GACJC,KAAK,WACLC,KAAK,WACLC,YAAY,WACZ/B,UAAQ,KAEVY,EAAAA,EAAAA,KAACoB,EAAAA,GAAY,CAACF,KAAK,WAAWG,UAAWC,EAAAA,SAE3CjB,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACEF,EAAAA,EAAAA,KAACa,EAAAA,GAAK,CAAAX,SAAC,qBACPF,EAAAA,EAAAA,KAACc,EAAAA,GAAK,CACJC,GAAIC,EAAAA,GACJC,KAAK,WACLC,KAAK,iBACLC,YAAY,kBACZ/B,UAAQ,KAEVY,EAAAA,EAAAA,KAACoB,EAAAA,GAAY,CAACF,KAAK,iBAAiBG,UAAWC,EAAAA,SAEjDtB,EAAAA,EAAAA,KAACuB,EAAAA,GAAY,CAACN,KAAK,SAAQf,SAAC,kBAGhCF,EAAAA,EAAAA,KAACwB,EAAAA,GAAU,CAACC,GAAG,UAASvB,SAAC,oBAMrC,ECnHA,EAxBmB,YACFN,EAAAA,EAAAA,IAAY8B,EAAAA,KACVC,EAAAA,EAAAA,MADjB,IAOM7B,GAAWC,EAAAA,EAAAA,MASjB,OACEC,EAAAA,EAAAA,KAAA4B,EAAAA,SAAA,CAAA1B,UACEF,EAAAA,EAAAA,KAAC6B,EAAM,CAACnC,OAfG,SAAAoC,GACbhC,GAASiC,EAAAA,EAAAA,IAAWD,GACtB,KAgBF,C","sources":["components/SignUpPage/SignUp.jsx","components/SignUpPage/SignUpPage.jsx"],"sourcesContent":["import Container from 'components/common/Container';\r\nimport React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { errorSelector } from '../../store/auth/selectors';\r\n\r\nimport {\r\n  Label,\r\n  Title,\r\n  LinkToPage,\r\n  Box,\r\n  StyledForm,\r\n  StyledInput,\r\n  SigninButton,\r\n  ErrorM,\r\n} from '../SigninPage/Auth.styled';\r\nimport { Wrapper } from 'components/HomePage/HomePage.styled';\r\n\r\n// function Signup({ signup }) {\r\n//   const error = useSelector(errorSelector);\r\n//   const [email, setEmail] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n\r\n//   const dispatch = useDispatch();\r\n\r\n//   const handleSubmit = e => {\r\n//     e.preventDefault();\r\n//     dispatch(signup({ email, password }));\r\n//   };\r\nconst validationSchema = Yup.object().shape({\r\n  email: Yup.string().email('Invalid email').required('Email is required'),\r\n  password: Yup.string().required('Password is required'),\r\n  repeatPassword: Yup.string()\r\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n    .required('Repeat password is required'),\r\n});\r\n\r\nconst initialValues = {\r\n  email: '',\r\n  password: '',\r\n  repeatPassword: '',\r\n};\r\n\r\nconst Signup = ({ signup }) => {\r\n  const error = useSelector(errorSelector);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = (values, { setSubmitting }) => {\r\n    dispatch(signup({ email: values.email, password: values.password }));\r\n    setSubmitting(false);\r\n  };\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Box>\r\n          <div>\r\n            {error && <h4>{error}</h4>}\r\n            <Title>Sign Up</Title>\r\n            {/* <Form onSubmit={handleSubmit}>\r\n              <div>\r\n                <Label>Enter your email</Label>\r\n                <Input\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  value={email}\r\n                  placeholder=\"Email\"\r\n                  onChange={({ target: { value } }) => setEmail(value)}\r\n                  required\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label>Enter your password</Label>\r\n                <Input\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  value={password}\r\n                  placeholder=\"Password\"\r\n                  onChange={({ target: { value } }) => setPassword(value)}\r\n                  required\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label>Repeat password</Label>\r\n                <Input\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  value={password}\r\n                  placeholder=\"Repeat pasword\"\r\n                  onChange={({ target: { value } }) => setPassword(value)}\r\n                  required\r\n                />\r\n              </div>\r\n              <RegisterButton type=\"submit\">Sign Up</RegisterButton>\r\n\r\n              <LinkToPage to=\"/signin\">Sign in</LinkToPage>\r\n            </Form> */}\r\n            <Formik\r\n              initialValues={initialValues}\r\n              validationSchema={validationSchema}\r\n              onSubmit={handleSubmit}\r\n            >\r\n              <StyledForm>\r\n                <div>\r\n                  <Label>Enter your email</Label>\r\n                  <Field\r\n                    as={StyledInput}\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"Email\"\r\n                    required\r\n                  />\r\n                  <ErrorMessage name=\"email\" component={ErrorM} />\r\n                </div>\r\n                <div>\r\n                  <Label>Enter your password</Label>\r\n                  <Field\r\n                    as={StyledInput}\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    required\r\n                  />\r\n                  <ErrorMessage name=\"password\" component={ErrorM} />\r\n                </div>\r\n                <div>\r\n                  <Label>Repeat password</Label>\r\n                  <Field\r\n                    as={StyledInput}\r\n                    type=\"password\"\r\n                    name=\"repeatPassword\"\r\n                    placeholder=\"Repeat password\"\r\n                    required\r\n                  />\r\n                  <ErrorMessage name=\"repeatPassword\" component={ErrorM} />\r\n                </div>\r\n                <SigninButton type=\"submit\">Sign Up</SigninButton>\r\n              </StyledForm>\r\n            </Formik>\r\n            <LinkToPage to=\"/signin\">Sign in</LinkToPage>\r\n          </div>\r\n        </Box>\r\n      </Container>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { refreshUser, signUpUser } from '../../store/auth/thunk';\r\nimport { tokenSelector } from '../../store/auth/selectors';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport SignUp from './SignUp';\r\n\r\nconst SignupPage = () => {\r\n  const isAuth = useSelector(tokenSelector);\r\n  const navigate = useNavigate();\r\n\r\n  const signup = body => {\r\n    dispatch(signUpUser(body));\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // useEffect(() => {\r\n  //   isAuth && navigate('/signin');\r\n  // }, [isAuth, navigate]);\r\n\r\n  // useEffect(() => {\r\n  //   dispatch(refreshUser());\r\n  // }, [dispatch]);\r\n  return (\r\n    <>\r\n      <SignUp signup={signup} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupPage;\r\n"],"names":["validationSchema","Yup","shape","email","required","password","repeatPassword","oneOf","initialValues","_ref","signup","error","useSelector","errorSelector","dispatch","useDispatch","_jsx","Wrapper","children","Container","Box","_jsxs","Title","Formik","onSubmit","values","_ref2","setSubmitting","StyledForm","Label","Field","as","StyledInput","type","name","placeholder","ErrorMessage","component","ErrorM","SigninButton","LinkToPage","to","tokenSelector","useNavigate","_Fragment","SignUp","body","signUpUser"],"sourceRoot":""}