{"version":3,"file":"static/js/811.0d9d4d84.chunk.js","mappings":"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","sources":["schemas/signupSchema.js","../node_modules/clsx/dist/clsx.m.js","pages/SignUpPage/SignUp.jsx","pages/SignUpPage/SignUpPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\r\n\r\nexport const signupSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .matches(/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/, 'Invalid email')\r\n    .required('Email is required'),\r\n  password: Yup.string()\r\n    .matches(\r\n      /^(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,64}$/,\r\n      'Password should have letters, numbers, special characters'\r\n    )\r\n    .min(8, 'Too short password')\r\n    .max(64, 'Too long password')\r\n    .required('Password is required'),\r\n  repeatPassword: Yup.string()\r\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n    .min(8, 'Too short password')\r\n    .max(64, 'Too long password')\r\n    .required('Repeat password is required'),\r\n});\r\n","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","import Container from 'components/common/Container';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Formik, Field, ErrorMessage } from 'formik';\r\nimport { errorSelector, successfulSelector } from '../../store/auth/selectors';\r\nimport sprite from '../../img/sprites.svg';\r\nimport {\r\n  Label,\r\n  Title,\r\n  LinkToPage,\r\n  Box,\r\n  StyledForm,\r\n  StyledInput,\r\n  SigninButton,\r\n  ErrorM,\r\n  StyledPasswordInput,\r\n  CaughtError,\r\n} from '../SigninPage/Auth.styled';\r\nimport { Wrapper } from '../HomePage/HomePage.styled';\r\nimport { signupSchema } from 'schemas/signupSchema';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { resetSuccessful } from 'store/auth/authSlice';\r\n\r\nconst initialValues = {\r\n  email: '',\r\n  password: '',\r\n  repeatPassword: '',\r\n};\r\n\r\nconst Signup = ({ signup }) => {\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n  const [repeatPasswordVisible, setRepeatPasswordVisible] = useState(false);\r\n  const successful = useSelector(successfulSelector);\r\n  const navigate = useNavigate();\r\n  const error = useSelector(errorSelector);\r\n  const dispatch = useDispatch();\r\n  const handleSuccessfulAuthentication = useCallback(() => {\r\n    toast.info(\r\n      'Успішна реєстрація! Вам на пошту був відправлений лист для підтвердження.'\r\n    );\r\n    setTimeout(() => {\r\n      navigate('/signin');\r\n    }, 6000);\r\n    dispatch(resetSuccessful());\r\n  }, [dispatch, navigate]);\r\n\r\n  useEffect(() => {\r\n    console.log(successful);\r\n    successful && !error && handleSuccessfulAuthentication();\r\n  }, [successful, error, handleSuccessfulAuthentication]);\r\n\r\n  const handleSubmit = async (values, { setSubmitting }) => {\r\n    await signup({ email: values.email, password: values.password });\r\n\r\n    setSubmitting(false);\r\n  };\r\n\r\n  const togglePasswordVisibility = field => {\r\n    if (field === 'password') {\r\n      setPasswordVisible(!passwordVisible);\r\n    } else if (field === 'repeatPassword') {\r\n      setRepeatPasswordVisible(!repeatPasswordVisible);\r\n    }\r\n  };\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Box>\r\n          <div>\r\n            {error && <CaughtError>{error}</CaughtError>}\r\n            <Formik\r\n              initialValues={initialValues}\r\n              validationSchema={signupSchema}\r\n              onSubmit={handleSubmit}\r\n            >\r\n              {({ isSubmitting, errors, touched }) => (\r\n                <StyledForm>\r\n                  <Title>Sign Up</Title>\r\n                  <div>\r\n                    <Label>Enter your email</Label>\r\n                    <Field\r\n                      as={StyledInput}\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      placeholder=\"Email\"\r\n                      hasError={touched.email && errors.email}\r\n                      required\r\n                    />\r\n                    <ErrorMessage name=\"email\" component={ErrorM} />\r\n                  </div>\r\n                  <div>\r\n                    <Label>Enter your password</Label>\r\n                    <StyledPasswordInput>\r\n                      <Field\r\n                        as={StyledInput}\r\n                        type={passwordVisible ? 'text' : 'password'}\r\n                        name=\"password\"\r\n                        placeholder=\"Password\"\r\n                        hasError={touched.password && errors.password}\r\n                        required\r\n                      />\r\n                      <span\r\n                        onClick={() => togglePasswordVisibility('password')}\r\n                      >\r\n                        {passwordVisible ? (\r\n                          <svg className=\"eye\">\r\n                            <use href={sprite + '#eye'} />\r\n                          </svg>\r\n                        ) : (\r\n                          <svg className=\"eye\">\r\n                            <use href={sprite + '#hidden'} />\r\n                          </svg>\r\n                        )}\r\n                      </span>\r\n                    </StyledPasswordInput>\r\n                    <ErrorMessage name=\"password\" component={ErrorM} />\r\n                  </div>\r\n                  <div>\r\n                    <Label>Repeat password</Label>\r\n                    <StyledPasswordInput>\r\n                      <Field\r\n                        as={StyledInput}\r\n                        type={repeatPasswordVisible ? 'text' : 'password'}\r\n                        name=\"repeatPassword\"\r\n                        placeholder=\"Repeat password\"\r\n                        required\r\n                        hasError={\r\n                          touched.repeatPassword && errors.repeatPassword\r\n                        }\r\n                      />\r\n                      <span\r\n                        onClick={() =>\r\n                          togglePasswordVisibility('repeatPassword')\r\n                        }\r\n                      >\r\n                        {repeatPasswordVisible ? (\r\n                          <svg className=\"eye\">\r\n                            <use href={sprite + '#eye'} />\r\n                          </svg>\r\n                        ) : (\r\n                          <svg className=\"eye\">\r\n                            <use href={sprite + '#hidden'} />\r\n                          </svg>\r\n                        )}\r\n                      </span>\r\n                    </StyledPasswordInput>\r\n                    <ErrorMessage name=\"repeatPassword\" component={ErrorM} />\r\n                  </div>\r\n                  <SigninButton\r\n                    type=\"submit\"\r\n                    width={336}\r\n                    disabled={isSubmitting}\r\n                  >\r\n                    Sign Up\r\n                  </SigninButton>\r\n                </StyledForm>\r\n              )}\r\n            </Formik>\r\n            <LinkToPage to=\"/signin\">Sign in</LinkToPage>\r\n\r\n            <ToastContainer />\r\n          </div>\r\n        </Box>\r\n      </Container>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { signUpUser } from '../../store/auth/thunk';\r\n\r\nimport SignUp from './SignUp';\r\n\r\nconst SignupPage = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const signup = body => {\r\n    dispatch(signUpUser(body));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SignUp signup={signup} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupPage;\r\n"],"names":["signupSchema","Yup","shape","email","matches","required","password","min","max","repeatPassword","oneOf","r","e","t","f","n","Array","isArray","length","arguments","initialValues","_ref","signup","_useState","useState","_useState2","_slicedToArray","passwordVisible","setPasswordVisible","_useState3","_useState4","repeatPasswordVisible","setRepeatPasswordVisible","successful","useSelector","successfulSelector","navigate","useNavigate","error","errorSelector","dispatch","useDispatch","handleSuccessfulAuthentication","useCallback","toast","setTimeout","resetSuccessful","useEffect","console","log","handleSubmit","_ref3","_asyncToGenerator","_regeneratorRuntime","_callee","values","_ref2","setSubmitting","_context","prev","next","stop","_x","_x2","apply","togglePasswordVisibility","field","_jsx","Wrapper","children","Container","Box","_jsxs","CaughtError","Formik","validationSchema","onSubmit","_ref4","isSubmitting","errors","touched","StyledForm","Title","Label","Field","as","StyledInput","type","name","placeholder","hasError","ErrorMessage","component","ErrorM","StyledPasswordInput","onClick","className","href","sprite","SigninButton","width","disabled","LinkToPage","to","ToastContainer","_Fragment","SignUp","body","signUpUser"],"sourceRoot":""}